//MapController Sayfası

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using YelkovanProject.Models;

namespace YelkovanProject.Controllers
{
    public class mapController : Controller
    {
        // GET: map
        public ActionResult Index()
        {
            YELKOVANEntities myEntityModel = new YELKOVANEntities();

            return View(myEntityModel.Mekans.ToList<Mekan>());
        }

        [HttpPost]
        public ActionResult Search2(string name, string distance = "0")
        {
            YELKOVANEntities GE = new YELKOVANEntities();
            //var result = GE.Geos.Where(x => x.name.StartsWith(name)).ToList();
            double dd;
            if (distance == "") dd = 0;
            else dd = Convert.ToDouble(distance.ToString()) * 1000;

            //string myQuery = "select TOP(1) g1.id,g1.name,g2.name, g1.Location.STDistance(g2.Location) as mesafe ";
            string myQuery = "select g2.* "; // g2.id,g2.name,g2.Location" ; //, g1.Location.STDistance(g2.Location) as mesafe ";
            myQuery += " from Mekan g1,Mekan g2 ";
            myQuery += " where g1.Ad LIKE '" + name + "%' and g1.Lokasyon.STDistance(g2.Lokasyon) <= " + dd;
            //+" order by g1.Location.STDistance(g2.Location) DESC";

            var result = GE.Mekans.SqlQuery(myQuery).ToList<Mekan>();

            List<mekan> lM = new List<mekan>();

            foreach (Mekan myL in result)
            {
                mekan nM = new mekan()
                {
                    ID = myL.ID,
                    name = myL.Ad,
                    lat = Convert.ToDouble(myL.Lokasyon.Latitude),
                    lng = Convert.ToDouble(myL.Lokasyon.Longitude),
                };

                lM.Add(nM);
            }

            //var sso=Json(result, JsonRequestBehavior.AllowGet);
            var sso = Json(lM, JsonRequestBehavior.AllowGet);

            return sso;
        }
        [HttpPost]
        public ActionResult Search3(string name, double distance)
        {
            YELKOVANEntities GE = new YELKOVANEntities();
            //var result = GE.Geos.Where(x => x.name.StartsWith(name)).ToList();

            string myQuery = "select TOP(1 percent) g1.ID,g1.Ad,g2.Ad, g1.Lokasyon.STDistance(g2.Lokasyon) as mesafe ";
            myQuery += "from dbo.Mekan g1,dbo.Mekan g2 ";
            myQuery += "where g1.Ad=" + name + "g1.Lokasyon.STDistance(g2.Lokasyon)>" + distance + " order by mesafe DESC";

            var result = GE.Mekans.SqlQuery(myQuery).ToList<Mekan>();

            List<mekan> lM = new List<mekan>();

            foreach (Mekan myL in result)
            {
                mekan nM = new mekan()
                {
                    ID = myL.ID,
                    name = myL.Ad,
                    lat = Convert.ToDouble(myL.Lokasyon.Latitude),
                    lng = Convert.ToDouble(myL.Lokasyon.Longitude),
                };

                lM.Add(nM);
            }

            //var sso=Json(result, JsonRequestBehavior.AllowGet);
            var sso = Json(lM, JsonRequestBehavior.AllowGet);

            return sso;

        }
        [HttpPost]
        public ActionResult Search(string Location)
        {
            YELKOVANEntities GE = new YELKOVANEntities();
            var result = GE.Mekans.Where(x => x.Ad.StartsWith(Location)).ToList();
            List<mekan> lM = new List<mekan>();

            foreach (Mekan myL in result)
            {
                mekan nM = new mekan()
                {
                    ID = myL.ID,
                    name = myL.Ad,
                    lat = Convert.ToDouble(myL.Lokasyon.Latitude),
                    lng = Convert.ToDouble(myL.Lokasyon.Longitude),
                };

                lM.Add(nM);
            }

            //var sso=Json(result, JsonRequestBehavior.AllowGet);
            var sso = Json(lM, JsonRequestBehavior.AllowGet);

            return sso;

        }
    }
}

//MapController Sonu

// ........................................

//index.cshtml Sayfası

@model IEnumerable<YelkovanProject.Models.Mekan>

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Index</title>
</head>
<body>
    <table>
        <tr>
            <td valign="top">
                @Html.TextBox("txtSearch1", null, new { @placeholder = "Mekan Ara" })
                <div id="myData">
                    <table>
                        @foreach (var item in Model)
                        {
                            <tr>
                                <td>
                                    @item.Ad
                                </td>
                            </tr>
                        }
                    </table>
                </div>
            </td>
            <td valign="top">
                <div id="googleMap" style="width:750px;height:600px"></div>
            </td>
            <td valign="top">
                @Html.TextBox("txtSearch2", null, new { @placeholder = "Mekan Seç" })
                @Html.TextBox("txtSearch3", null, new { @placeholder = "Mesafe Yaz" })
                <div id="myData">
                    <table>
                        @foreach (var item in Model)
                        {
                            <tr>
                                <td>
                                    @item.Ad
                                </td>
                            </tr>
                        }
                    </table>
                </div>
            </td>
        </tr>
    </table>
    <p>
        @*@Html.ActionLink("Create New", "Create")
            </p>
            <table class="table">
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.Location)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Location.Longitude)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Location.Latitude)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Event_Type)
                    </th>
                    <th></th>
                </tr>

            @foreach (var item in Model) {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.Location)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Location.Longitude)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Location.Latitude)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Event_Type)
                    </td>
                    <td>
                        @Html.ActionLink("Edit", "Edit", new { id=item.Event_No }) |
                        @Html.ActionLink("Details", "Details", new { id=item.Event_No }) |
                        @Html.ActionLink("Delete", "Delete", new { id=item.Event_No })
                    </td>
                </tr>
            }

            </table>*@


        <script src="~/Scripts/jquery-1.10.2.js"></script>
        <script src="~/Scripts/jquery.unobtrusive-ajax.js"></script>
        @*<script src="~/Scripts/jquery.validate.unobtrusive.js"></script>*@


        <script src="http://maps.googleapis.com/maps/api/js?key=AIzaSyDY0kkJiTPVd2U7aTOAwhc9ySH6oHxOIYM&sensor=false"></script>

        <script type="text/javascript">
            $(document).ready(function () {
                var gmarkers = [];
                var map;

                function initialize() {

                    var mapProp = {
                        center: new google.maps.LatLng(36.11, 30.42), //Turkey
                        zoom: 4,
                        mapTypeId: google.maps.MapTypeId.SATELLITE
                    };
                    map = new google.maps.Map(document.getElementById("googleMap"), mapProp);
                }

                google.maps.event.addDomListener(window, 'load', initialize);

                $("#txtSearch3").keyup(function () {


                    var x = $("#txtSearch2").val();
                    var y = $("#txtSearch3").val();

                    for (i = 0; i < gmarkers.length; i++) {
                        gmarkers[i].setMap(null);
                    }

                    $.ajax({
                        type: "POST",
                        url: '@Url.Action("Search2", "map")', //"../Map/Search"
                        contentType: "application/json; charset=utf-8",
                        data: JSON.stringify({ "name": x, "distance": y }),
                        dataType: "json",
                        error: function (q, status, err) { console.log(q, status, err); },
                        success: function (data) {
                            //alert('success');
                            var table = "";

                            table = "<table class='table' ><tbody>";

                            $.each(data, function (index, value) {
                                console.log(value);
                                table += "";
                                var latlng = new google.maps.LatLng(value.lng, value.lat);
                                var marker = new google.maps.Marker({
                                    position: latlng,
                                    //icon: "../pinkball.png",
                                    map: map
                                });

                                gmarkers.push(marker);
                                table += "<tr><td>" + value.name + "</td></tr>";
                            });
                            table += "</tbody></table>";
                            $("#myData").html(table);

                            if (x == "") {
                                for (j = 0; j < gmarkers.length; j++) {
                                    gmarkers[j].setMap(null);
                                }
                            }
                        }
                    });
                });
                $("#txtSearch2").keyup(function () {

                    var x = $("#txtSearch2").val();
                    var y = $("#txtSearch3").val();


                    for (i = 0; i < gmarkers.length; i++) {
                        gmarkers[i].setMap(null);
                    }

                    $.ajax({
                        type: "POST",
                        url: '@Url.Action("Search2", "map")', //"../Map/Search"
                        contentType: "application/json; charset=utf-8",
                        data: JSON.stringify({ "name": x, "distance": y }),
                        dataType: "json",
                        error: function (q, status, err) { console.log(q, status, err); },
                        success: function (data) {
                            //alert('success');
                            var table = "";

                            table = "<table class='table' ><tbody>";

                            $.each(data, function (index, value) {
                                console.log(value);
                                table += "";
                                var latlng = new google.maps.LatLng(value.lng, value.lat);
                                var marker = new google.maps.Marker({
                                    position: latlng,
                                    //icon: "../pinkball.png",
                                    map: map
                                });

                                gmarkers.push(marker);
                                table += "<tr><td>" + value.name + "</td></tr>";
                            });
                            table += "</tbody></table>";
                            $("#myData").html(table);

                            if (x == "") {
                                for (j = 0; j < gmarkers.length; j++) {
                                    gmarkers[j].setMap(null);
                                }
                            }
                        }
                    });
                });

                $("#txtSearch1").keyup(function () {


                    var x = $("#txtSearch1").val();

                    for (i = 0; i < gmarkers.length; i++) {
                        gmarkers[i].setMap(null);
                    }


                    $.ajax({
                        type: "POST",
                        url: '@Url.Action("Search", "map")', //"../Map/Search"
                        contentType: "application/json; charset=utf-8",
                        data: JSON.stringify({ "Location": x }),
                        dataType: "json",
                        error: function (q, status, err) { console.log(q, status, err); },
                        success: function (data) {
                            //alert('success');
                            var table = "";

                            table = "<table class='table' ><tbody>";

                            $.each(data, function (index, value) {
                                console.log(value);
                                table += "";
                                var latlng = new google.maps.LatLng(value.lng, value.lat);
                                var marker = new google.maps.Marker({
                                    position: latlng,
                                    //icon: "../pinkball.png",
                                    map: map
                                });

                                gmarkers.push(marker);
                                table += "<tr><td>" + value.name + "</td></tr>";
                            });
                            table += "</tbody></table>";
                            $("#myData").html(table);

                            if (x == "") {
                                for (j = 0; j < gmarkers.length; j++) {
                                    gmarkers[j].setMap(null);
                                }
                            }
                        }
                    });
                });
            });
        </script>

</body>
</html>

//index.cshtml Sayfası Sonu
